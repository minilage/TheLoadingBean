@page "/products/new"
@page "/products/edit/{Id}"

@inject ProductService ProductService
@inject NavigationManager Navigation
@using TheLoadingBean.Shared.Models
@using TheLoadingBean.Client.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">@(_isEdit ? "Redigera produkt" : "Ny produkt")</MudText>

    <EditForm Model="_product" OnValidSubmit="HandleValidSubmit">
        <MudTextField @bind-Value="_product.ProductNumber" Label="Produktnummer" Required="true" />
        <MudTextField @bind-Value="_product.Name" Label="Namn" Required="true" />
        <MudTextField @bind-Value="_product.Description" Label="Beskrivning" />
        <MudNumericField T="decimal" @bind-Value="_product.Price" Label="Pris" Required="true" />
        <MudTextField @bind-Value="_product.Category" Label="Kategori" />
        <MudCheckBox T="bool" @bind-Checked="_product.IsAvailable" Label="Tillgänglig" />

        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary">Spara</MudButton>
        <MudButton Variant="Variant.Text" OnClick="@GoBack">Avbryt</MudButton>
    </EditForm>
</MudPaper>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Product _product = new();
    private bool _isEdit => !string.IsNullOrEmpty(Id);

    protected override async Task OnInitializedAsync()
    {
        if (_isEdit)
        {
            var existing = await ProductService.GetProductByIdAsync(Id!);
            if (existing is not null)
            {
                _product = new Product
                    {
                        Id = existing.Id,
                        ProductNumber = existing.ProductNumber,
                        Name = existing.Name,
                        Description = existing.Description,
                        Price = existing.Price,
                        Category = existing.Category,
                        IsAvailable = existing.IsAvailable,
                        IsDiscontinued = existing.IsDiscontinued
                    };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_isEdit)
        {
            var updateDto = new UpdateProductDto
                {
                    ProductNumber = _product.ProductNumber,
                    Name = _product.Name,
                    Description = _product.Description,
                    Price = _product.Price,
                    Category = _product.Category,
                    IsAvailable = _product.IsAvailable,
                    IsDiscontinued = _product.IsDiscontinued
                };
            await ProductService.UpdateProductAsync(Id!, updateDto);
        }
        else
        {
            var createDto = new CreateProductDto
                {
                    ProductNumber = _product.ProductNumber,
                    Name = _product.Name,
                    Description = _product.Description,
                    Price = _product.Price,
                    Category = _product.Category,
                    IsAvailable = _product.IsAvailable,
                    IsDiscontinued = _product.IsDiscontinued
                };
            await ProductService.CreateProductAsync(createDto);
        }

        Navigation.NavigateTo("/products");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/products");
    }
}