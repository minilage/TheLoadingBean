@page "/products"

@using TheLoadingBean.Client.Services
@using TheLoadingBean.Client.Dialogs
@using TheLoadingBean.Shared.Models
@using MudBlazor
@inject ProductService ProductService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Produkter</PageTitle>

<MudPaper Class="p-4">

    <MudText Typo="Typo.h5" Class="mb-4">Produkter</MudText>

    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
               Class="mb-4" OnClick="@CreateProduct">
        Ny produkt
    </MudButton>

    <MudTable Items="_products" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Produktnummer</MudTh>
            <MudTh>Namn</MudTh>
            <MudTh>Pris</MudTh>
            <MudTh>Kategori</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductNumber</MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@($"{context.Price} kr")</MudTd>
            <MudTd>@context.Category</MudTd>
            <MudTd>
                @if (context.IsAvailable)
                {
                    <MudChip T="string" Color="Color.Success">Tillgänglig</MudChip>
                }
                else
                {
                    <MudChip T="string" Color="Color.Error">Ej tillgänglig</MudChip>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudPaper>

@code {
    private List<ProductResponseDto> _products = [];

    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.GetAllProductsAsync();
    }

    private async Task CreateProduct()
    {
        var dialog = await DialogService.ShowAsync<CreateProductDialog>("Ny produkt");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is Product newProduct)
        {
            var dto = new CreateProductDto
                {
                    ProductNumber = newProduct.ProductNumber,
                    Name = newProduct.Name,
                    Description = newProduct.Description,
                    Price = newProduct.Price,
                    Category = newProduct.Category,
                    IsAvailable = newProduct.IsAvailable,
                    IsDiscontinued = newProduct.IsDiscontinued
                };

            await ProductService.CreateProductAsync(dto);
            _products = await ProductService.GetAllProductsAsync();
        }
    }
}